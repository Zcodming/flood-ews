// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String      @id @default(cuid())
  name          String
  username      String      @unique
  password      String
  role          UserRole    @default(USER)
  email         String      @unique
  emailVerified DateTime?
  createAt      DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  accounts      Account[]
  devices       Devices[]
  sessions      Session[]
  locations     Locations[]
  Contact       Contact[]
}

model Locations {
  id       String    @id @default(cuid())
  address  String    @unique
  province String
  regency  String
  city     String
  userId   String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  devices  Devices[]
  contact  Contact[]
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Devices {
  id             String           @id @default(cuid())
  deviceName     String           @unique
  channel        Int
  field          Int
  locationId     String
  userId         String
  createAt       DateTime         @default(now())
  updateAt       DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  location       Locations        @relation(fields: [locationId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  DevicePosition DevicePosition[]
  Contact        Contact[]

  @@index([locationId])
  @@index([userId])
}

model DevicePosition {
  id         Int      @id @default(autoincrement())
  deviceName String   @unique
  latitude   Decimal? @db.Decimal(9, 6)
  longitude  Decimal? @db.Decimal(9, 6)
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  device     Devices  @relation(fields: [deviceName], references: [deviceName], onDelete: Cascade)

  @@index([deviceName])
}

model Contact {
  id              String    @id @default(cuid())
  waNumber        String    @unique
  description     String?   @db.Text
  deviceName      String
  name            String
  userId          String
  contactLocation String
  createAt        DateTime  @default(now())
  updateAt        DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  location        Locations @relation(fields: [contactLocation], references: [address], onDelete: Restrict, onUpdate: Cascade)
  device          Devices   @relation(fields: [deviceName], references: [deviceName], onDelete: Restrict, onUpdate: Cascade)

  @@index([contactLocation])
  @@index([deviceName])
  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
