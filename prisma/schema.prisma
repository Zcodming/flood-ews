// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  type               String  
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  userId             String  @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id              String    @id @default(cuid()) 
  sessionToken    String    @unique
  userId          String   
  expires         DateTime
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id              String      @id @default(cuid()) 
  name            String      @db.VarChar(225)
  username        String      @unique @db.VarChar(225)
  password        String      @db.VarChar(225)
  email           String      @unique @db.VarChar(225)
  emailVerified   DateTime? 
  createAt        DateTime    @default(now())
  updateAt        DateTime    @updatedAt
  role            UserRole    @default(USER)
  accounts        Account[]
  devices         Devices[]
  sessions        Session[]
  locations       Locations[]
  apiKey          String?
}

model Locations {
  id              String      @id @default(cuid())
  address         String      @unique
  details         String?     @db.VarChar(225)
  userId          String
  userName        String      @db.VarChar(225)
  createAt        DateTime    @default(now())
  updateAt        DateTime    @updatedAt
  devices         Devices[]
  staf            Staf[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Devices {
  id                String      @id @default(cuid())
  deviceName        String           
  apiKey            String?     
  channelId         String
  field             Int
  deviceAddress     String
  locationId        String
  userId            String      
  createAt          DateTime    @default(now())
  updateAt          DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  location          Locations   @relation(fields: [locationId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([locationId])
  @@index([userId])
}

model DevicePosition {
  deviceId          String      @unique
  apiKey            String
  longitude         String?     @db.VarChar(225)
  latitude          String?     @db.VarChar(225)
}

model Staf {
  id                String     @id @default(cuid())
  name              String     
  details           String?    @db.VarChar(225)
  stafLocation      String
  phoneNumber       String     @unique
  location          Locations   @relation(fields: [stafLocation], references: [address], onDelete: Restrict, onUpdate: Cascade)
  createAt          DateTime   @default(now())
  updateAt          DateTime   @updatedAt

  @@index([stafLocation])
}

model VerificationToken {
  id            String     @id @default(cuid()) 
  identifier    String
  token         String     @unique
  expires       DateTime

  @@unique([identifier, token])
}